{
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "airbnb-typescript",
    "airbnb/hooks"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2018, // Allows for the parsing of modern ECMAScript features
    "project": "./tsconfig.json",
    "sourceType": "module" // Allows for the use of imports
  },
  "plugins": ["react", "@typescript-eslint"],
  "rules": {
    // Spacing in brackets is consistent and readable
    "array-bracket-spacing": ["error", "always"],
    // Spacing in brackets is consistent and readable
    "computed-property-spacing": ["error", "always"],
    // Spacing in brackets is consistent and readable
    "space-in-parens": [
      "error",
      "always",
      {
        "exceptions": ["empty"]
      }
    ],
    // Doesn't really help to check if the module is on the filesystem, and can harm when using Docker etc: https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-unresolved.md
    "import/no-unresolved": "off",
    // Do not require .js/ts extensions, except for .json
    "import/extensions": [
      "error",
      "never",
      {
        "json": "always"
      }
    ],
    // Preferable, but the author should know best for the situation
    "import/prefer-default-export": "off",
    // jsx-a11y is not valid for our use-cases
    "jsx-a11y/anchor-is-valid": "off",
    "jsx-a11y/click-events-have-key-events": "off",
    "jsx-a11y/no-static-element-interactions": "off",
    "jsx-a11y/no-noninteractive-element-interactions": "off",
    // Windows users may checkout as CRLF, but check in as LF, which this rule breaks
    "linebreak-style": "off",
    // There's no need to have more than 1 empty line, ever
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 1
      }
    ],
    // No unused variables except when prepended with _, to indicate that they're not to be used, but require definition to be valid code
    "no-unused-vars": [
      "error",
      {
        "ignoreRestSiblings": true,
        "argsIgnorePattern": "^_"
      }
    ],
    // https://eslint.org/docs/rules/no-shadow seems sensible to not have shadow variables, but can get annoying real quick, especially in the case of reducers
    "no-shadow": "off",
    // Be consistent about where the object braces go
    "object-curly-newline": [
      "error",
      {
        "consistent": true
      }
    ],
    // Object properties either on the same line, or all on separate, consistently
    "object-property-newline": [
      "error",
      {
        "allowAllPropertiesOnSameLine": true
      }
    ],
    // No need to have the .jsx file extension
    "react/jsx-filename-extension": "off",
    // No need to sort methods in class components, and it can sometimes mess with member and function declarations
    "react/sort-comp": "off",
    // There's no point disabling prop spreading, it can be useful if not abused
    "react/jsx-props-no-spreading": "off",
    // Let Typescript infer the return types
    "@typescript-eslint/explicit-module-boundary-types": "off",
    // Sometimes you want to declare a function as async so that it returns a Promisified value
    "@typescript-eslint/require-await": "off",
    // Use types throughout, not interfaces
    "@typescript-eslint/consistent-type-definitions": ["error", "type"],
    // Semi colons are visual garbage
    "@typescript-eslint/semi": ["error", "never"],
    // For the few semi-colons required (e.g. inline array operations), place them at the beginning of the statement
    "semi-style": ["error", "first"],
    // Typescript types should be delimeted by commas, not semi-colons
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "comma"
        },
        "singleline": {
          "delimiter": "comma"
        }
      }
    ],
    // Prefer passing in ES6 default values to function components (ideal solution resolve #113)
    "react/require-default-props": "off",
    // This plugin sorts alphabetically by default
    "simple-import-sort/sort": "off",
    // Add new line between imports
    "import/order": [
      "error",
      {
        "newlines-between": "always"
      }
    ]
  }
}
